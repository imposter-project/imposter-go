version: '3.8'

services:
  # Redis for distributed rate limiting
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # DynamoDB Local for distributed rate limiting
  dynamodb:
    image: amazon/dynamodb-local:latest
    ports:
      - "8000:8000"
    command: ["-jar", "DynamoDBLocal.jar", "-sharedDb", "-inMemory"]
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/ || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 3

  # DynamoDB table setup (runs once to create tables)
  dynamodb-setup:
    image: amazon/aws-cli:latest
    depends_on:
      dynamodb:
        condition: service_healthy
    environment:
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
      - AWS_DEFAULT_REGION=us-east-1
    command: >
      sh -c "
        aws dynamodb create-table \
          --table-name imposter-store \
          --attribute-definitions \
            AttributeName=StoreName,AttributeType=S \
            AttributeName=Key,AttributeType=S \
          --key-schema \
            AttributeName=StoreName,KeyType=HASH \
            AttributeName=Key,KeyType=RANGE \
          --billing-mode PAY_PER_REQUEST \
          --endpoint-url http://dynamodb:8000 \
        || echo 'Table already exists or creation failed'
      "
    restart: "no"

  # Imposter with in-memory store
  imposter-inmemory:
    build:
      context: ../../..
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - .:/config:ro
    command: ["-configDir", "/config", "-port", "8080"]
    environment:
      - IMPOSTER_STORE_DRIVER=
      - IMPOSTER_RATE_LIMITER_TTL=300
    profiles:
      - inmemory

  # Imposter with Redis store
  imposter-redis:
    build:
      context: ../../..
      dockerfile: Dockerfile
    ports:
      - "8081:8080"
    volumes:
      - .:/config:ro
    depends_on:
      redis:
        condition: service_healthy
    command: ["-configDir", "/config", "-port", "8080"]
    environment:
      - IMPOSTER_STORE_DRIVER=store-redis
      - REDIS_ADDR=redis:6379
      - IMPOSTER_RATE_LIMITER_TTL=300
    profiles:
      - redis

  # Imposter with DynamoDB store
  imposter-dynamodb:
    build:
      context: ../../..
      dockerfile: Dockerfile
    ports:
      - "8082:8080"
    volumes:
      - .:/config:ro
    depends_on:
      dynamodb-setup:
        condition: service_completed_successfully
    command: ["-configDir", "/config", "-port", "8080"]
    environment:
      - IMPOSTER_STORE_DRIVER=store-dynamodb
      - IMPOSTER_DYNAMODB_TABLE=imposter-store
      - AWS_ENDPOINT_URL=http://dynamodb:8000
      - AWS_ACCESS_KEY_ID=dummy
      - AWS_SECRET_ACCESS_KEY=dummy
      - AWS_DEFAULT_REGION=us-east-1
      - IMPOSTER_RATE_LIMITER_TTL=300
    profiles:
      - dynamodb

  # Load testing service with hey
  loadtest:
    image: williamyeh/hey:latest
    depends_on:
      - imposter-inmemory
    volumes:
      - ./test-scenarios.sh:/test-scenarios.sh:ro
    command: ["/bin/sh", "-c", "sleep 5 && /test-scenarios.sh"]
    environment:
      - IMPOSTER_URL=http://imposter-inmemory:8080
    profiles:
      - loadtest

  # Multi-instance Redis setup (for testing distributed rate limiting)
  imposter-redis-1:
    build:
      context: ../../..
      dockerfile: Dockerfile
    ports:
      - "8091:8080"
    volumes:
      - .:/config:ro
    depends_on:
      redis:
        condition: service_healthy
    command: ["-configDir", "/config", "-port", "8080"]
    environment:
      - IMPOSTER_STORE_DRIVER=store-redis
      - REDIS_ADDR=redis:6379
      - IMPOSTER_RATE_LIMITER_TTL=300
      - INSTANCE_ID=instance-1
    profiles:
      - multi-redis

  imposter-redis-2:
    build:
      context: ../../..
      dockerfile: Dockerfile
    ports:
      - "8092:8080"
    volumes:
      - .:/config:ro
    depends_on:
      redis:
        condition: service_healthy
    command: ["-configDir", "/config", "-port", "8080"]
    environment:
      - IMPOSTER_STORE_DRIVER=store-redis
      - REDIS_ADDR=redis:6379
      - IMPOSTER_RATE_LIMITER_TTL=300
      - INSTANCE_ID=instance-2
    profiles:
      - multi-redis

volumes:
  redis_data: